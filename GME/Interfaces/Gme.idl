import "oaidl.idl";
import "ocidl.idl";

#include "InterfaceColl.h"
#include "InterfaceVersion.h"

import "Mga.idl";

interface IGMEOLEColl;

typedef enum  msgtype_enum {
	MSG_NORMAL = 0,
	MSG_INFO = 1,
	MSG_WARNING = 2,
	MSG_ERROR =3
} msgtype_enum;

typedef enum  editmode_enum {
	MODE_EDIT = 0,
	MODE_CONNECT = 1,
	MODE_DISCONNECT = 2,
	MODE_SET =3,
	MODE_ZOOM =4,
	MODE_VISUALIZE =5
} editmode_enum;

typedef enum  bar_enum {
	BAR_HORIZ = 0,
	BAR_VERTI = 1
} bar_enum;

typedef enum  scroll_enum {
	SCROL_UP = 0,
	SCROL_DOWN = 1,
	SCROL_PGUP = 2,
	SCROL_PGDN = 3,
	SCROL_HOME = 4,
	SCROL_END = 5
} scroll_enum;

typedef enum  attribpanel_page {
	PAGE_ATTRIB = 0,
	PAGE_PREF = 1,
	PAGE_PROP = 2
} attribpanel_page;

// --------------------------- Gme IDL

[ uuid(9FF8F4E0-E0C9-11d3-B376-005004D38590),
	oleautomation,
	dual
]
interface IMgaDataSource : IDispatch
{
	[propget, id(1), helpstring("property Data")]
	HRESULT Data([out, retval] IUnknown **p);

	[propget, id(2), helpstring("property Data")]
	HRESULT Folders([out, retval] IUnknown **p);

	[propget, id(3), helpstring("property RegistryData")]
	HRESULT RegistryData([out, retval] IUnknown **p);

	[propget, id(4), helpstring("property Project")]
	HRESULT Project([out, retval] IUnknown **p);
};

interface IGMEOLEIt;

//  Primary dispatch interface for CGMEOLEApp
	
[ uuid(81191A44-B898-4143-BF8B-CA7501FEC19A), 
	oleautomation,
	dual
]
interface IGMEOLEApp : IDispatch
{
	// properties:
	[propput, id(1)] HRESULT Visible([in] VARIANT_BOOL isVisible);
	[propget, id(1)] HRESULT Visible([out, retval] VARIANT_BOOL* isVisible);
	[propget, id(2)] HRESULT Version([out, retval] BSTR* versionStr);
	[propget, id(3)] HRESULT VersionMajor([out, retval] short* n);
	[propget, id(4)] HRESULT VersionMinor([out, retval] short* n);
	[propget, id(5)] HRESULT VersionPatchLevel([out, retval] short* n);
	[propget, id(6)] HRESULT Models([out, retval] IGMEOLEColl** coll);
	[propget, id(7)] HRESULT MgaProject([out, retval] IMgaProject** project);
	[propget, id(8)] HRESULT Panels([out, retval] IGMEOLEColl** coll);
	[propput, id(9)] HRESULT ConsoleContents([in] BSTR contents);
	[propget, id(9)] HRESULT ConsoleContents([out, retval] BSTR* contents);
			
	// methods:
	[id(10)] HRESULT CreateProject([in] BSTR metaname, [in] BSTR connstr);
	[id(11)] HRESULT OpenProject([in] BSTR connstr);
	[id(12)] HRESULT CreateProjectDialog();
	[id(13)] HRESULT OpenProjectDialog();
	[id(14)] HRESULT CloseProject([in] VARIANT_BOOL saveOnClose);
	[id(15)] HRESULT SaveProject();
	[id(16)] HRESULT SaveProjectAs([in] BSTR connstr);
	[id(17)] HRESULT SaveProjectAsDialog();
	[id(18)] HRESULT ExportProject([in] BSTR connstr);
	[id(19)] HRESULT ImportProject([in] BSTR connstr);
	[id(20)] HRESULT ConstraintsDialog();
	[id(21)] HRESULT CheckAllConstraints();
	[id(22)] HRESULT RegisterParagimsDialog();
	[id(23)] HRESULT RegisterComponentsDialog();
	[id(24)] HRESULT RunComponent([in] BSTR progID);
	[id(25)] HRESULT RunComponentDialog();
	[id(26)] HRESULT SettingsDialog();
	[id(27)] HRESULT Undo();
	[id(28)] HRESULT Redo();
	[id(29)] HRESULT ClearUndoQueue();
	[id(30)] HRESULT ProjectPropertiesDialog();
	[id(31)] HRESULT ShowHelpContents();
	[id(32)] HRESULT ShowAbout();
	[id(33)] HRESULT ShowFCO([in] IMgaFCO* mgaFCO, [in, defaultvalue(0)] VARIANT_BOOL inParent);
	[id(34)] HRESULT ConsoleMessage([in] BSTR msg, [in]msgtype_enum type);
	[id(35)] HRESULT ConsoleClear();
	[id(36)] HRESULT ConsoleNavigateTo([in] BSTR url);

	[id(37), helpstring("method ChangeEditmode")] HRESULT ChangeEditmode([in] editmode_enum mode);
	[id(38), helpstring("method GridShow")] HRESULT GridShow([in] VARIANT_BOOL show);
	[id(39), helpstring("method AttributepanelPage")] HRESULT AttributepanelPage([in] attribpanel_page page);

	[propget, id(40)] HRESULT OleIt([out, retval] IGMEOLEIt ** mgamodel);

	// methods for disabling components (interpreters, plugins) on the toolbar and in File/Run Interpreter menu
	// Users do NOT need to call SetCompFiltering
	[id(41), helpstring("method for disabling/enabling a component")] 
	HRESULT DisableComp( [in] BSTR pCompProgID, [in] VARIANT_BOOL pDisable);

	// disable automatically a component whenever a model specified in the 2nd parameter
	// is opened AND focused in the editing window
	//    e.g. : gme.DisableCompForKinds( "MGA.Interpreter.SFInterpreter", "Primitive;Compound")
	// specify the special string below to disable components when no model is open at all
	//    e.g. : gme.DisableCompForKinds( "MGA.Interpreter.SFInterpreter", "_NO_MODEL_IS_OPEN_")
	// Users NEED to call SetCompFiltering to activate this feature (before or after)
	[id(42), helpstring("method for disabling/enabling a component when certain model kinds are shown")] 
	HRESULT DisableCompForKinds( [in] BSTR pCompProgID, [in] BSTR pKindSequenceDelimitedBySemicolon);

	// this method must be used to turn the DisableCompForKinds feature on
	[id(43), helpstring("method for turning on/off component filtering")] 
	HRESULT SetCompFiltering( [in] VARIANT_BOOL pTurnOn);

	// is the feature turned on?
	[id(44), helpstring("inquire component filtering state")] 
	HRESULT GetCompFiltering( [out, retval] VARIANT_BOOL* pPtrTurnedOn);

	[id(45), helpstring("Sets the working directory. Will affect the dialogs when the user will Open or Save As")]
	HRESULT SetWorkingDirectory( [in] BSTR pDirPath);

	[id(46), helpstring("Exit Application")]
	HRESULT Exit();

	[id(47), helpstring("Refresh Lib")]
	HRESULT RefreshLib( [in] BSTR pLibName, [in] VARIANT_BOOL ungroup, [out,retval] long* numOfErrors);
};


[ uuid(F2181278-749F-459d-8700-92F088B80D72),
	oleautomation,
	dual 
]
interface IGMEOLEIt : IDispatch // the current/active opened view (model)
{
	// methods and properties similar to those defined in IGMEOLEModel:

	// properties:
	[propget, id(1)] HRESULT Valid([out, retval] VARIANT_BOOL* isValid);
	[propget, id(2)] HRESULT Aspects([out, retval] IGMEOLEColl** coll);
	[propget, id(3)] HRESULT MgaModel([out, retval] IMgaModel** model);

	// methods:

	[id(5)] HRESULT Print();
	[id(6)] HRESULT PrintDialog();
	[id(7)] HRESULT DumpWindowsMetaFile([in] BSTR filePath);
	[id(8)] HRESULT CheckConstraints();
	[id(9)] HRESULT RunComponent([in] BSTR appID);
	[id(10)] HRESULT RunComponentDialog();
	[id(11)] HRESULT Close();
	[id(12)] HRESULT GrayOutFCO([in] VARIANT_BOOL bGray, [in] VARIANT_BOOL bNeighbours, [in] IMgaFCOs* mgaFCO);
	[id(13)] HRESULT GrayOutHide();
	[id(14)] HRESULT ShowSetMembers([in] IMgaFCO* mgaFCO);
	[id(15)] HRESULT HideSetMembers();
	[id(16)] HRESULT Zoom([in] DWORD percent);
	[id(17)] HRESULT ZoomTo([in] IMgaFCOs* mgaFCOs);
	[id(18)] HRESULT Scroll([in] bar_enum, [in] scroll_enum);
	[id(19)] HRESULT DumpModelGeometryXML([in] BSTR filePath);


	// methods allowing the user to generate models ie. from the scripting window:
	[helpstring("ShowFCO - accepts relative path both up and down. For models only: If InParent == true shown selected in parent, otherwise opened.")]
	HRESULT ShowFCO( [in] BSTR path, [in, defaultvalue(0)] VARIANT_BOOL inParent );
	[helpstring("ShowFCOPtr - changes the view to fco.")]
	HRESULT ShowFCOPtr( [in] IMgaFCO* fco, [in, defaultvalue(0)] VARIANT_BOOL inParent );

	HRESULT Child( [in] BSTR name, [out,retval] IMgaFCO** child_fco );
	HRESULT Create( [in] BSTR part, [in] BSTR name, [out,retval] IMgaFCO** new_fco );
	[helpstring("creates a 'part' named 'name' in child_as_parent model")]
	HRESULT CreateInChild( [in] BSTR child_as_parent, [in] BSTR part, [in] BSTR name, [out,retval] IMgaFCO** new_fco );
	HRESULT CreateInChildFCO( [in] IMgaFCO* child_as_parent, [in] BSTR part, [in] BSTR name, [out,retval] IMgaFCO** new_fco );

	HRESULT Duplicate([in] BSTR existing_fco_name, [in] BSTR new_fco_name, [out,retval] IMgaFCO** new_fco );
	HRESULT DuplicateFCO([in] IMgaFCO* existing_fco, [in] BSTR new_fco_name, [out,retval] IMgaFCO** new_fco );

	HRESULT Rename( [in] BSTR oldname, [in] BSTR newname);
	HRESULT SetName( [in] IMgaFCO*, [in] BSTR name);

	HRESULT Include( [in] BSTR setname, [in] BSTR name);
	HRESULT Exclude( [in] BSTR setname, [in] BSTR membername);

	HRESULT IncludeFCO( [in] IMgaSet* p_set, [in] IMgaFCO* fco);
	HRESULT ExcludeFCO( [in] IMgaSet* p_set, [in] IMgaFCO* fco);

	HRESULT Connect( [in] BSTR src_part, [in] BSTR dst_part, [in] BSTR connection_role, [out, retval] IMgaConnection ** conn );
	HRESULT Disconnect( [in] BSTR src_part, [in] BSTR dst_part, [in] BSTR connection_name);

	[helpstring("creates a connection. src_part_1 must be the model/reference, src_part_2 must be the port's name. if portname empty connection drawn to src_part_1")]
	HRESULT ConnectThruPort( [in] BSTR src_part_1, [in] BSTR src_part_2, [in] BSTR dst_part_1, [in] BSTR dst_part_2, [in] BSTR connection_role, [out, retval] IMgaConnection ** conn );
	HRESULT ConnectThruPortFCO( [in] IMgaFCO* src_part_1, [in] IMgaFCO* src_part_2, [in] IMgaFCO* dst_part_1, [in] IMgaFCO* dst_part_2, [in] BSTR connection_role, [out, retval] IMgaConnection ** conn);
	HRESULT DisconnectThruPort( [in] BSTR src_part_1, [in] BSTR src_part_2, [in] BSTR dst_part_1, [in] BSTR dst_part_2, [in] BSTR connection_name);


	HRESULT ConnectFCOs( [in] IMgaFCO* src_part, [in] IMgaFCO* dst_part, [in] BSTR connection_role, [out, retval] IMgaConnection ** conn );
	HRESULT DisconnectFCOs( [in] IMgaFCO* src_part, [in] IMgaFCO* dst_part, [in] BSTR connection_name);

	HRESULT Refer( [in] BSTR reference, [in] BSTR referred);
	HRESULT ClearRef( [in] BSTR reference);
	HRESULT FollowRef( [in] BSTR reference);

	HRESULT ReferFCO( [in] IMgaReference* reference, [in] IMgaFCO* referred);
	HRESULT ClearRefFCO( [in] IMgaReference* reference);
	HRESULT FollowRefFCO( [in] IMgaReference* reference);
	HRESULT NullFCO( [out, retval] IMgaFCO** nullobj);


	HRESULT SetAttribute( [in] BSTR name, [in] BSTR attr_name, [in] VARIANT value);
	HRESULT GetAttribute( [in] BSTR name, [in] BSTR attr_name, [out, retval] VARIANT* value);

	HRESULT SetAttributeFCO( [in] IMgaFCO* fco, [in] BSTR attr_name, [in] VARIANT value);
	HRESULT GetAttributeFCO( [in] IMgaFCO* fco, [in] BSTR attr_name, [out, retval] VARIANT* value);

	HRESULT SubType( [in] BSTR base, [in] BSTR name_of_subtype, [out, retval] IMgaFCO** subtype);	
	HRESULT Instantiate( [in] BSTR base, [in] BSTR name_of_instance, [out, retval] IMgaFCO** instance);

	HRESULT SubTypeFCO( [in] IMgaFCO* base, [in] BSTR name_of_subtype, [out, retval] IMgaFCO** subtype);
	HRESULT InstantiateFCO( [in] IMgaFCO* base, [in] BSTR name_of_instance, [out, retval] IMgaFCO** instance);

	HRESULT BeginTransaction();
	HRESULT CommitTransaction();
	HRESULT AbortTransaction();
	HRESULT IsInTransaction( [out, retval] VARIANT_BOOL* intrans);
	HRESULT PutInTerritory( [in] IMgaFCO* fco, [out, retval] IMgaFCO** newfco);

	HRESULT Help();

	HRESULT SetSelected( [in] BSTR space_delimited_string );
	HRESULT GetSelected( [out, retval] BSTR * space_delimited_string );
	HRESULT SetSelectedFCOs([in] IMgaFCOs* fcos_to_select);
	HRESULT GetSelectedFCOs([out, retval] IMgaFCOs** selected_fcos);


	[helpstring("gets the current aspect of this view (opened model)")]
	HRESULT GetCurrentAspect([out, retval] BSTR* aspectName);
	[helpstring("sets the current aspect to the given aspect in this view (opened model)")]
	HRESULT SetCurrentAspect([in] BSTR aspectName);
	[helpstring("switches to the next aspect of this view (opened model)")]
	HRESULT NextAspect();
	[helpstring("switches to the previous aspect of this view (opened model)")]
	HRESULT PrevAspect();

	[helpstring("makes the next (if any) view (opened model) the active view ")]
	HRESULT Next();
	HRESULT Prev();

	HRESULT Position( [in] BSTR child, [in] BSTR aspect, [in] long parX, [in] long parY);
	HRESULT PositionFCO( [in] IMgaFCO* fco, [in] BSTR aspect, [in] long parX, [in] long parY);
};

//  Primary dispatch interface for CGMEOLEModel

[ uuid(399A16A0-D209-4d00-9BDF-858D87EC4641),
	oleautomation,
	dual 
]
interface IGMEOLEModel : IDispatch // actually it corresponds to a view
{
	// properties:
	[propput, id(1)] HRESULT Active([in] VARIANT_BOOL isActive);
	[propget, id(1)] HRESULT Active([out, retval] VARIANT_BOOL* isActive);
	[propget, id(2)] HRESULT Aspects([out, retval] IGMEOLEColl** coll);
	[propget, id(3)] HRESULT MgaModel([out, retval] IMgaModel** model);
	[propget, id(4)] HRESULT Valid([out, retval] VARIANT_BOOL* isValid);
		
	// methods:
	[id(5)] HRESULT Print();
	[id(6)] HRESULT PrintDialog();
	[id(7)] HRESULT DumpWindowsMetaFile([in] BSTR filePath);
	[id(8)] HRESULT CheckConstraints();
	[id(9)] HRESULT RunComponent([in] BSTR appID);
	[id(10)] HRESULT RunComponentDialog();
	[id(11)] HRESULT Close();
	[id(12)] HRESULT GrayOutFCO([in] VARIANT_BOOL bGray, [in] VARIANT_BOOL bNeighbours, [in] IMgaFCOs* mgaFCO);
	[id(13)] HRESULT GrayOutHide();
	[id(14)] HRESULT ShowSetMembers([in] IMgaFCO* mgaFCO); // set is in this open model
	[id(15)] HRESULT HideSetMembers();
	[id(16)] HRESULT Zoom([in] DWORD percent); // for open models only
	[id(17)] HRESULT ZoomTo([in] IMgaFCOs* mgaFCOs); // for open models only
	[id(18)] HRESULT Scroll([in] bar_enum, [in] scroll_enum); // for opened models only
	[id(19)] HRESULT DumpModelGeometryXML([in] BSTR filePath);
	[id(20)] HRESULT GetCurrentAspect([out, retval] BSTR* aspectName);
	[id(21)] HRESULT SetCurrentAspect([in] BSTR aspectName);

};


//  Primary dispatch interface for CGMEOLEAspect

[ uuid(EDEEB1F8-BC44-40d2-BE91-83E8CCD59845),
	oleautomation, 
	dual
]
interface IGMEOLEAspect : IDispatch
{
	// properties:
	[propget, id(1)] HRESULT MgaAspect([out, retval] IMgaMetaAspect** aspect);
	[propput, id(2)] HRESULT Active([in] VARIANT_BOOL isActive);
	[propget, id(2)] HRESULT Active([out, retval] VARIANT_BOOL* isActive);
	[propget, id(3)] HRESULT Valid([out, retval] VARIANT_BOOL* isValid);

	// methods:
};


//  Primary dispatch interface for CGMEOLEPanel

[ uuid(C047FAEB-7AE7-40fb-8C5C-90C73DAD4BC6), 
	oleautomation, 
	dual
]
interface IGMEOLEPanel :  IDispatch
{
	// properties:
	[propget, id(1)] HRESULT Name([out, retval] BSTR* name);
	[propput, id(2)] HRESULT Visible([in] VARIANT_BOOL isVisible);
	[propget, id(2)] HRESULT Visible([out, retval] VARIANT_BOOL* isVisible);
	[propget, id(3)] HRESULT Interface([out, retval] IDispatch** interf);
		
	// methods:
};


//  Primary dispatch interface for CGMEOLEColl

[ uuid(36C7B797-6BDE-46d0-8870-70189000EDF9),
	oleautomation,
	dual
]
interface IGMEOLEColl : IDispatch
{
	[propget, id(1)] HRESULT Count([out, retval] long *cnt);
	
	[id(2)] HRESULT Add(IDispatch* newValue);
	[id(3)] HRESULT Find(IDispatch* findValue, [out, retval] long *cnt);
	[id(4)] HRESULT Remove(VARIANT removeValue);
	[id(5)] HRESULT RemoveAll();

	[propget, id(DISPID_VALUE)] HRESULT Item(long nIndex, [out, retval] IDispatch** val);
	[propput, id(DISPID_VALUE)] HRESULT Item(long nIndex, IDispatch* newValue);
	[propget, id(DISPID_NEWENUM)] HRESULT _NewEnum([out, retval] IUnknown** e);
};

// --------------------------- Gme IDL



// --------------------------- VersionInfo

typedef enum MgaInterfaceVersion_enum
{
	MgaInterfaceVersion_None = 0,
	MgaInterfaceVersion_Legacy = 4,
	MgaInterfaceVersion_Current = INTERFACE_VERSION
} MgaInterfaceVersion_enum;

cpp_quote("#define MgaInterfaceVersion MgaInterfaceVersion_enum")

[
	oleautomation,
	uuid(9A228010-020B-11d2-BBB3-0040051F7117),
	helpstring("Mga VersionInfo Interface")
]
interface IMgaVersionInfo : IUnknown
{
	[propget, helpstring("property version")]
	HRESULT version([out, retval] MgaInterfaceVersion_enum *pVal);
};

//-------------------------------------------------------------------------------

